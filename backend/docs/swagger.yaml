basePath: /
definitions:
  models.RegisterDTO:
    properties:
      password:
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - password
    - role_id
    - username
    type: object
  models.UpdatedUserDTO:
    properties:
      role_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  models.UserDTO:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is api server for esther project
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Esther Server API
  version: "1.0"
paths:
  /api/user:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
      security:
      - JWT: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
      security:
      - JWT: []
      summary: Get user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: Register new user
        in: body
        name: RegisterDTO
        required: true
        schema:
          $ref: '#/definitions/models.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: ok
      security:
      - JWT: []
      summary: Create user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Update user
        in: body
        name: UpdatedUserDTO
        required: true
        schema:
          $ref: '#/definitions/models.UpdatedUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: ok
      security:
      - JWT: []
      summary: Update user
      tags:
      - Users
  /api/users:
    get:
      consumes:
      - application/json
      description: list all users
      produces:
      - application/json
      responses:
        "200":
          description: ok
      security:
      - JWT: []
      summary: List users
      tags:
      - Users
  /login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Login user
        in: body
        name: UserDTO
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: ok
      summary: Login
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: register
      parameters:
      - description: Register new user
        in: body
        name: RegisterDTO
        required: true
        schema:
          $ref: '#/definitions/models.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: ok
      summary: Register
      tags:
      - Auth
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
